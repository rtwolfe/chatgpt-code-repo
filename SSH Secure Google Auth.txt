#!/bin/bash

# Script: OpenSSH secure with Google Authentication
# Author: rtwolfe2023
# GPTBot: https://t.me/neuralnavigator
# Description: This script sets up and hardens OpenSSH using Google Authenticator for two-factor authentication. 
# It includes installing Google Authenticator, updating SSH configurations for enhanced security, and applying best practices for SSH hardening. 
# Each user needs to manually configure Google Authenticator. The script is designed for Debian/Ubuntu systems.

# Function to check if a package is installed
is_package_installed() {
    dpkg -s "$1" &> /dev/null
    return $?
}

# Update system and install Google Authenticator if not already installed
if ! is_package_installed "libpam-google-authenticator"; then
    apt-get update
    apt-get install -y libpam-google-authenticator
else
    echo "Google Authenticator is already installed."
fi

# Inform the user about manual configuration step
echo "Manually run 'google-authenticator' as each user who will use 2FA."

# Backup SSH PAM and SSHD configuration files
cp /etc/pam.d/sshd /etc/pam.d/sshd.backup
cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup

# Update SSH PAM configuration, check for error
if ! grep -q "pam_google_authenticator.so" /etc/pam.d/sshd; then
    echo "auth required pam_google_authenticator.so" >> /etc/pam.d/sshd
fi

# Update SSHD configuration for hardening, check for error
SSHD_CONFIG="/etc/ssh/sshd_config"

sed -i '/^ChallengeResponseAuthentication /c\ChallengeResponseAuthentication yes' $SSHD_CONFIG
sed -i '/^PermitRootLogin /c\PermitRootLogin no' $SSHD_CONFIG
sed -i '/^PasswordAuthentication /c\PasswordAuthentication no' $SSHD_CONFIG
sed -i '/^PermitEmptyPasswords /c\PermitEmptyPasswords no' $SSHD_CONFIG

# Secure cryptographic algorithms
sed -i '/^KexAlgorithms /c\KexAlgorithms diffie-hellman-group-exchange-sha256' $SSHD_CONFIG
sed -i '/^Ciphers /c\Ciphers aes256-ctr,aes192-ctr,aes128-ctr' $SSHD_CONFIG
sed -i '/^MACs /c\MACs hmac-sha2-512,hmac-sha2-256' $SSHD_CONFIG

# Specify allowed users (edit as needed)
# echo "AllowUsers username" >> $SSHD_CONFIG

# Restart SSH service to apply changes, check for error
if systemctl restart sshd; then
    echo "SSH has been configured and restarted successfully."
else
    echo "Failed to restart SSH. Restoring backup configurations."
    cp /etc/pam.d/sshd.backup /etc/pam.d/sshd
    cp /etc/ssh/sshd_config.backup /etc/ssh/sshd_config
    systemctl restart sshd
    exit 1
fi

echo "SSH is now configured with Google Authenticator 2FA and additional hardening. Please test logging in."

===
Notes:
===
The script is tailored for Debian/Ubuntu systems and aims to enhance SSH security by integrating Google Authenticator for two-factor authentication. It automates the process of installing necessary packages, updating SSH configurations for better security, and ensuring best practices in SSH hardening. Key features include disabling root login, enforcing key-based authentication, and configuring strong cryptographic algorithms. Users need to complete the Google Authenticator setup manually for each account. This script should be tested in a non-production environment before deployment to avoid potential lockouts.