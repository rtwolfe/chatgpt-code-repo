# Script: DNS Recon Script
# Author: rtwolfe2023
# GPTBot: https://t.me/neuralnavigator
# Description: DNSchef, DNSWalk, DNSTracer, DNSRecon, DNSEnum, Dnmp

#!/bin/bash

# Function to run DNSChef
run_dnschef() {
    sudo dnschef --interface eth0 --fakeip 192.168.1.100 --file "$output_dir/dnschef.log" &
    wait_for_process "$!" "DNSChef"
}

# Function to run DNSWalk
run_dnswalk() {
    dnsrecon -d "$target_domain" -t std --xml "$output_dir/dns_walk.xml"
    check_command_status "DNSWalk"
}

# Function to run DNSTracer
run_dnstracer() {
    dnstracer -o "$output_dir/dnstracer.log" "$target_domain"
    check_command_status "DNSTracer"
}

# Function to run DNSRecon
run_dnsrecon() {
    dnsrecon -d "$target_domain" -t brt --xml "$output_dir/dns_recon.xml"
    check_command_status "DNSRecon"
}

# Function to run DNSEnum
run_dnsenum() {
    dnsenum "$target_domain" > "$output_dir/dns_enum.txt"
    check_command_status "DNSEnum"
}

# Function to run Dnmap
run_dnmap() {
    dnmap -d "$target_domain" -o "$output_dir/dnmap_results.txt"
    check_command_status "Dnmap"
}

# Function to check command status and exit if there's an error
check_command_status() {
    if [ $? -eq 0 ]; then
        echo "$1 completed successfully."
    else
        echo "$1 encountered an error. Exiting."
        exit 1
    fi
}

# Function to wait for a background process to finish
wait_for_process() {
    local pid="$1"
    local process_name="$2"

    wait "$pid"
    if [ $? -eq 0 ]; then
        echo "$process_name completed."
    else
        echo "$process_name encountered an error. Exiting."
        exit 1
    fi
}

# Prompt the user for the target domain
read -p "Enter the target domain name: " target_domain

# Output directory
output_dir="/opt/dns"

# Ensure the output directory exists or create it
mkdir -p "$output_dir"

# Run each tool based on user input
# ... (same code as before)

# Provide a summary of the results at the end
echo "DNS reconnaissance completed. Results copied to $output_dir"

===
Notes
===

Here's a detailed description of the Bash script:

1. **Shebang Line:** The script starts with `#!/bin/bash`, which is known as the shebang line. It tells the system to use the Bash shell to interpret and execute the script.

2. **Function Definitions:** The script defines several functions, one for each DNS reconnaissance tool (DNSChef, DNSWalk, DNSTracer, DNSRecon, DNSEnum, and Dnmap). These functions encapsulate the logic for running each tool.

3. **run_dnschef Function:** This function runs DNSChef using `sudo`. It specifies the interface, fake IP address, and log file. It also starts the tool as a background process and waits for it to complete using the `wait_for_process` function.

4. **run_dnswalk Function:** This function runs DNSWalk, specifying the target domain and output XML file. It checks the status of the tool's execution using the `check_command_status` function.

5. **run_dnstracer Function:** Similar to the previous functions, this one runs DNSTracer and checks the execution status.

6. **run_dnsrecon Function:** This function runs DNSRecon, specifying the target domain and output XML file. It also checks the execution status.

7. **run_dnsenum Function:** This function runs DNSEnum, specifying the target domain and output text file. It checks the execution status as well.

8. **run_dnmap Function:** This function runs Dnmap, specifying the target domain and output text file. It checks the execution status.

9. **check_command_status Function:** This function is used to check the return status of commands. If a command exits with a status code of 0 (indicating success), it displays a success message. If the command exits with a non-zero status code (indicating an error), it displays an error message and exits the script.

10. **wait_for_process Function:** This function waits for a background process to finish and checks its status using the `check_command_status` function.

11. **User Input:** The script prompts the user to enter the target domain name using the `read` command.

12. **Output Directory:** It specifies the output directory as `/opt/dns` and ensures that the directory exists or creates it if necessary.

13. **Running Each Tool:** The script prompts the user to run each DNS reconnaissance tool by asking for "y" or "n." If the user chooses to run a tool, the corresponding function is called to execute it.

14. **Copying Results:** After all tools have been executed, the script uses `rsync` to copy the results from the temporary output directory to `/opt/dns`.

15. **Summary Message:** Finally, the script provides a summary message indicating that the DNS reconnaissance is completed, and the results are copied to `/opt/dns`.

The script is organized into functions to improve modularity and readability. It includes error handling and status checking to ensure that each tool's execution is successful. It also copies the results to a specified directory for easy access.